1.题目
2.分为前端，后台，数据库三个部分
3.本次项目的重点部分在前端
	首先说一下我前端部分涉及到了哪些技术
	基本技术 html css javaScript ajax
	我在项目中主要使用了vue.js框架

	vue.js vue-router vuex fetch bootstrap-vue ui框架 sass es6

	本次项目的架构，我是用vue-cli脚手架工具生成的

	接下来，看一下我项目的结构



	先来看一下我项目的主页
	home.vue
	它主要包含两个部分，一个头部组件，还有下方的信息展示区，像一些公告啊，最新资讯啊什么的可以放到首页里，因为现在还没有需求，所以就用一张图片来代替

	来看一下header组件吧，

	它是最简单的一个组件，我们先通过他来熟悉一下组件的基本构成
	说起来，你可以理解成，每一个以.vue结尾的文件就是一个组件

	一个组件由三部分组成
		template
			中写html代码

		script中写JavaScript代码
			其中
				js代码应该就是项目最为复杂的地方
				它是由
				data
				computed
				methods
				生命周期钩子什么的


		style中写scss代码

	当你点击我要挂号按钮的时候，我们会发生一个路由的跳转，这个路由的跳转，和我们平时看到的两张网页之间的切换不一样，vue是一个单页面应用，它这里并没有跳转到另一个网页，而且它这里还有一个#号

	那么我们看看，它到底是怎么实现的

		先让我们看看效果

		1.要实现一个路由跳转，你首先应该到这里看一看，这里使用了new Router（）方法
		来配置路由
		既然走到了这里，我们不妨先了解一下，模块化的方法
		我们在es6中使用 import来导入模块 使用export来导出模块

		我们先引入一个组件
		然后配置它
		在app.vue中写入    
		就是把这个路由挂载到这里
		<router-view></router-view>



		这个路由就可以跳转了

		当然这里我还使用了路由重定向让路由嵌套，等复杂的方法，那你需要多次重复上面的步骤，这是个精细活，逻辑必须非常清晰，环环相扣，否则，路由就全部显示不出来


		当然，我在后面的部分还在路由中传了值，方便它把数据传到下一条路由
		这是个复杂的过程




		接下来，你就进入了studypages这个页面

		这个页面是由另一个头部组件组成
		下边毫无疑问，就是路由挂载的地方

		在接下来进入main页面
		它由标题选项卡，路由挂载点和footer组成

		按科室挂号，按疾病挂号，同样会进行路由的跳转


		按科室挂号

		这里使用了bootstrap的响应式布局，并且是通过后台数据渲染的页面

		使用了v-for指令

		进行循环渲染，并不需要一条一条的加载
		使用双大括号将数据展示在页面中


		接下来我们就首先看一看
		data
		computed
		methods
		钩子函数的使用方法

		以及如何去后台获取数据，
		这里就使用到了vuex状态管理

		vuex状态管理
		state:数据存放的地方
		getters:它的作用类似于计算属性
		mutations:突变，只能使用mutations来改变state中的值，并且它是同步的
		actions:使用fetch进行异步交互，调用mutation来改变state
		在页面的任意地方就能使用this.$store.state.studyPages.什么什么什么就能获取到state中的值

		这个流程是非常难的



		了解了vuex的工作原理，那么，我们来试试，一开始我们是怎么获取后台数据的

		使用了钩子函数，在这个页面创建的时候
		去获取后台的数据，经过vuex的炼化，拿到state,将state循环渲染到页面上





		detail.vue

		分为左右两个部分




		完成里渲染之后，我们就来到了下一步

		无论我们点那个科室，或者那个病症，我们都是跳转到同一个页面下，我们怎么实现页面不变，数据发生改变呢？
		秘密在这里
		this.$router.push("/studyPage/department/"+departmentId)

		datail.vue
		左边的选择大夫和右边的路由跳转




		我们把数据的id传到地址上去，当进入homepage页面的时候
		请求数据

		动态获取当前的大夫id
		然后查询时间日期，挂号人数

		显示模态框，将数据传入后台，修改数据库



		后台api设计

		express脚手架

		连接数据库
		操作数据库
		设置api 8个

		思路简单，但是我自己写的时候，各种错误，各种诡异的问题，最后都解决了
		

